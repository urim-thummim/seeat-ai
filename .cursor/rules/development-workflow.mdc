---
description: 
globs: 
alwaysApply: true
---
# 씨앗AI 개발 워크플로우

## 개발 단계별 가이드

### Phase 1: 기반 구축 (3주)
현재 위치: 기획 완료 → 개발 시작

#### Week 1: 프로젝트 설정
- [ ] 백엔드 프로젝트 구조 생성
- [ ] Python 가상환경 설정
- [ ] 필수 패키지 설치 (requirements.txt)
- [ ] 환경 변수 설정 (.env)
- [ ] Git 초기 설정

#### Week 2: 영상 처리 파이프라인
- [ ] yt-dlp 유튜브 다운로드 구현
- [ ] FFmpeg 오디오 추출
- [ ] Whisper STT 통합
- [ ] 처리 상태 추적 시스템

#### Week 3: 텍스트 처리
- [ ] 텍스트 전처리 (정제, 노이즈 제거)
- [ ] 청킹 전략 구현
- [ ] 메타데이터 추출 (제목, 날짜, 타임스탬프)
- [ ] 한국어 형태소 분석

### Phase 2: RAG 엔진 (2주)
#### Week 4: 임베딩 및 저장
- [ ] 한국어 임베딩 모델 통합
- [ ] ChromaDB 벡터 저장소 설정
- [ ] 배치 임베딩 처리
- [ ] 벡터 검색 최적화

#### Week 5: 검색 시스템
- [ ] 하이브리드 검색 구현
- [ ] 메타데이터 필터링
- [ ] 검색 결과 랭킹
- [ ] 성능 테스트 및 튜닝

### Phase 3: 답변 생성 (2주)
#### Week 6: LLM 통합
- [ ] OpenAI GPT-4o API 연결
- [ ] 프롬프트 엔지니어링
- [ ] 컨텍스트 윈도우 관리
- [ ] 스트리밍 응답 구현

#### Week 7: 개인화 및 품질
- [ ] 목사님 스타일 프롬프트 개발
- [ ] Few-shot learning 구현
- [ ] 답변 품질 평가 시스템
- [ ] 피드백 수집 메커니즘

### Phase 4: 프론트엔드 (2주)
#### Week 8: 기본 UI
- [ ] Next.js 프로젝트 설정
- [ ] 질문 입력 인터페이스
- [ ] 답변 표시 컴포넌트
- [ ] 반응형 디자인

#### Week 9: 고급 기능
- [ ] 질문 히스토리
- [ ] 설교 검색 기능
- [ ] 관리자 대시보드
- [ ] 성능 최적화

### Phase 5: 최종 배포 (1주)
#### Week 10: 배포 및 런칭
- [ ] 프로덕션 환경 설정
- [ ] 성능 모니터링
- [ ] 사용자 테스트
- [ ] 공식 런칭

## 일일 개발 루틴

### 시작 체크리스트
- [ ] 최신 docs 문서 확인 (변경사항 있는지)
- [ ] 오늘의 개발 목표 설정
- [ ] 관련 기술 스택 문서 리뷰
- [ ] 개발 환경 활성화

### 개발 중 체크리스트
- [ ] 코딩 표준 준수 확인
- [ ] 단위 테스트 작성
- [ ] 성능 고려사항 체크
- [ ] 한국어 특화 고려

### 완료 체크리스트
- [ ] 코드 리뷰 완료
- [ ] 테스트 통과 확인
- [ ] 문서 업데이트 (필요시)
- [ ] Git 커밋 및 푸시

## 문제 해결 가이드

### 기술적 이슈
1. **STT 품질 문제**
   - Whisper 모델 크기 조정
   - 오디오 전처리 개선
   - 한국어 설정 확인

2. **검색 정확도 문제**
   - 임베딩 모델 교체 고려
   - 청킹 전략 조정
   - 하이브리드 검색 가중치 튜닝

3. **응답 속도 문제**
   - 캐싱 전략 구현
   - 모델 티어링 적용
   - 인덱스 최적화

4. **답변 품질 문제**
   - 프롬프트 개선
   - 컨텍스트 품질 향상
   - Few-shot 예제 추가

### 비용 관리
- API 사용량 일일 모니터링
- 비효율적인 호출 패턴 식별
- 캐싱으로 중복 요청 방지
- 모델 선택 최적화

## 테스트 시나리오

### 기능 테스트
1. **설교 업로드 테스트**
   - 유튜브 링크로 영상 다운로드
   - STT 처리 정확도 확인
   - 메타데이터 추출 검증

2. **질문 답변 테스트**
   - 다양한 유형의 질문 테스트
   - 응답 시간 측정
   - 답변 정확성 평가

3. **사용자 시나리오 테스트**
   - [docs/03-user-stories.md](mdc:docs/03-user-stories.md)의 시나리오 실행
   - 사용자 여정 검증
   - 예외 상황 처리

### 성능 테스트
- 동시 사용자 50명 시뮬레이션
- 응답 시간 3초 이내 유지
- 메모리 사용량 모니터링
- API 처리량 측정

## 배포 체크리스트

### 스테이징 배포
- [ ] 환경 변수 설정 확인
- [ ] 데이터베이스 마이그레이션
- [ ] API 엔드포인트 테스트
- [ ] 성능 벤치마크 실행

### 프로덕션 배포
- [ ] 보안 설정 검토
- [ ] 모니터링 도구 연결
- [ ] 백업 시스템 확인
- [ ] 롤백 계획 준비

## 협업 가이드

### 코드 리뷰
- Pull Request 템플릿 사용
- 기능, 성능, 보안 관점 검토
- 문서 업데이트 여부 확인
- 테스트 커버리지 확인

### 문서 동기화
- 기능 변경 시 관련 문서 업데이트
- 새로운 기술 도입 시 tech-stack.md 수정
- 사용자 피드백을 user-stories.md에 반영
- 개발 이슈를 risk-management.md에 기록

## 품질 보증

### 코드 품질
- 린터 (flake8, ESLint) 통과
- 타입 힌트 100% 적용
- 문서화 완료
- 테스트 커버리지 80% 이상

### 사용자 경험
- 모바일 반응형 대응
- 접근성 기준 준수
- 로딩 상태 표시
- 에러 메시지 사용자 친화적

### 운영 안정성
- 장애 복구 시간 최소화
- 모니터링 알람 설정
- 정기 백업 수행
- 보안 업데이트 적용